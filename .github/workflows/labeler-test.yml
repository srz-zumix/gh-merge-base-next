name: "Labeler Test"
on:
- pull_request

env:
  ASIS_AUTHOR_PR: 41
  NO_LABEL_NO_REQUEST_PR: 37
  LABELED_NO_REQUEST_PR: 38
  NO_LABEL_REQUESTED_PR: 39
  DRAFT_NO_LABEL_NO_REQUEST_PR: 40
  CLOSED_NO_LABEL_NO_REQUEST_PR: 23

jobs:
  labeler-test:
    permissions:
      contents: read
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    env:
      CONFIGURATION_PATH: .github/labeler-test.yml
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod tidy

      - name: Build
        run: go build ./...

      - uses: actions/labeler@v6
        id: labeler
        with:
          sync-labels: true
          configuration-path: ${{ env.CONFIGURATION_PATH }}
      - env:
          ALL_LABELS: ${{ steps.labeler.outputs.all-labels }}
        run: |
          echo "Labels: ${ALL_LABELS}"

      - name: Label-kit labeler
        id: label-kit-labeler
        run: |
          MATCHED_LABELS=$(go run . labeler \
            --config ${{ env.CONFIGURATION_PATH }} \
            --sync \
            --format json --jq '[ .[].name ] | join(",")' \
            ${{ github.event.number }})
          echo "labels=${MATCHED_LABELS}" | tee "${GITHUB_OUTPUT}"
      - name: Test
        env:
          LABELER_ALL_LABELS: ${{ steps.labeler.outputs.all-labels }}
          LABEL_KIT_ALL_LABELS: ${{ steps.label-kit-labeler.outputs.labels }}
        run: |
          LABELER_LABELS_SORTED=$(echo "${LABELER_ALL_LABELS}" | tr ',' '\n' | sort | tr '\n' ',' | sed 's/,$//')
          LABEL_KIT_LABELS_SORTED=$(echo "${LABEL_KIT_ALL_LABELS}" | tr ',' '\n' | sort | tr '\n' ',' | sed 's/,$//')
          echo "LABELER_LABELS_SORTED=${LABELER_LABELS_SORTED}"
          echo "LABEL_KIT_LABELS_SORTED=${LABEL_KIT_LABELS_SORTED}"
          test "${LABELER_LABELS_SORTED}" == "${LABEL_KIT_LABELS_SORTED}"

  sync-test:
    permissions:
      contents: read
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod tidy

      - name: Build
        run: go build ./...

      - name: Label-kit sync-enable
        id: sync-enable
        run: |
          MATCHED_LABELS=$(go run . labeler \
            --config .github/labeler-sync-test-enable.yml \
            --sync \
            --format json --jq '[ .[].name ] | join(",")' \
            1)
          echo "labels=${MATCHED_LABELS}" | tee "${GITHUB_OUTPUT}"
      - name: Label-kit sync-disable
        id: sync-disable
        run: |
          MATCHED_LABELS=$(go run . labeler \
            --config .github/labeler-sync-test-disable.yml \
            --sync \
            --format json --jq '[ .[].name ] | join(",")' \
            1)
          echo "labels=${MATCHED_LABELS}" | tee "${GITHUB_OUTPUT}"
      - name: Test
        env:
          SYNC_ENABLE_LABELS: ${{ steps.sync-enable.outputs.labels }}
          SYNC_DISABLE_LABELS: ${{ steps.sync-disable.outputs.labels }}
        run: |
          test "${SYNC_ENABLE_LABELS}" == "sync-test"
          test "${SYNC_DISABLE_LABELS}" == ""

  codeowners-test:
    permissions:
      contents: read
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod tidy

      - name: Build
        run: go build ./...

      #
      # Test that review requests cannot be sent to the author
      #
      - name: Label-kit codeowners-enable
        run: |
          go run . labeler \
            --config .github/labeler-codeowners-test-enable.yml \
            --sync \
            --format json --jq '[ .[].name ] | join(",")' \
            "${ASIS_AUTHOR_PR}"
      - &test-reviewers-empty
        name: Test reviewers (should have not reviewers)
        run: |
          REVIEWERS=$(gh pr view "${ASIS_AUTHOR_PR}" --json reviewRequests --jq '.reviewRequests[].login')
          test "${REVIEWERS}" == ""
      - &label-kit-codeowners-disable
        name: Label-kit codeowners-disable
        run: |
          go run . labeler \
            --config .github/labeler-codeowners-test-disable.yml \
            --sync \
            --format json --jq '[ .[].name ] | join(",")' \
            "${ASIS_AUTHOR_PR}"

      #
      # Test that review requests invalid user are ignored
      #
      - name: Label-kit codeowners-enable (invalid user)
        id: codeowners-invalid-user
        continue-on-error: true
        run: |
          go run . labeler \
            --config .github/labeler-codeowners-test-invalid-user.yml \
            --sync \
            --format json --jq '[ .[].name ] | join(",")' \
            "${ASIS_AUTHOR_PR}"
      - name: Test reviewers
        env:
          CODEOWNERS_INVALID_USER_OUTCOME: ${{ steps.codeowners-invalid-user.outcome }}
        run: |
          REVIEWERS=$(gh pr view "${ASIS_AUTHOR_PR}" --json reviewRequests --jq '.reviewRequests[].login')
          test "${REVIEWERS}" == ""
          test "${CODEOWNERS_INVALID_USER_OUTCOME}" == "failure"
      - *label-kit-codeowners-disable

      #
      # Test closed PR does not request reviewers
      #
      - name: Label-kit codeowners-enable (closed PR)
        run: |
          go run . labeler \
            --config .github/labeler-codeowners-test-enable.yml \
            --sync \
            --dryrun \
            --format json --jq '[ .[].name ] | join(",")' \
            "${CLOSED_NO_LABEL_NO_REQUEST_PR}" | tee ${{ runner.temp }}/output.txt
      - &test-reviewers-no-request
        name: Test no request
        run: |
          if grep -q "Would request reviewers for PR" "${RUNNER_TEMP}/output.txt"; then
            echo "Error: Would request reviewers even if already requested"
            exit 1
          fi


  codeowners-request-mode-test:
    permissions:
      contents: read
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod tidy

      - name: Build
        run: go build ./...

      # addto reviewers
      - name: Label-kit codeowners-enable (addto)
        shell: bash
        run: |
          go run . labeler \
            --config .github/labeler-codeowners-test-enable.yml \
            --sync \
            --dryrun \
            "${NO_LABEL_NO_REQUEST_PR}" | tee ${{ runner.temp }}/output.txt
      - &test-reviewers-srz-zumix
        name: Test reviewers
        run: |
          grep -q "Would request reviewers for PR" "${RUNNER_TEMP}/output.txt"
          grep -q "srz-zumix" "${RUNNER_TEMP}/output.txt"

      - name: Label-kit codeowners-enable (addto, already labeled)
        shell: bash
        run: |
          go run . labeler \
            --config .github/labeler-codeowners-test-enable.yml \
            --sync \
            --dryrun \
            "${LABELED_NO_REQUEST_PR}" | tee ${{ runner.temp }}/output.txt
      - *test-reviewers-no-request

      - name: Label-kit codeowners-enable (addto, already requested)
        shell: bash
        run: |
          go run . labeler \
            --config .github/labeler-codeowners-test-enable.yml \
            --sync \
            --dryrun \
            "${NO_LABEL_REQUESTED_PR}" | tee ${{ runner.temp }}/output.txt
      - *test-reviewers-no-request

      # always request
      - name: Label-kit codeowners-enable (always)
        shell: bash
        run: |
          go run . labeler \
            --config .github/labeler-codeowners-test-enable.yml \
            --sync \
            --review-request always \
            --dryrun \
            "${LABELED_NO_REQUEST_PR}" | tee ${{ runner.temp }}/output.txt
      - *test-reviewers-srz-zumix

      # none request
      - name: Label-kit codeowners-enable (none request)
        shell: bash
        run: |
          go run . labeler \
            --config .github/labeler-codeowners-test-enable.yml \
            --sync \
            --review-request none \
            --dryrun \
            "${NO_LABEL_NO_REQUEST_PR}" | tee ${{ runner.temp }}/output.txt
      - *test-reviewers-no-request

  codeowners-expand-fallback-test:
    permissions:
      contents: read
      pull-requests: write
      issues: write
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5
        with:
          persist-credentials: false

      - name: Set up Go
        uses: actions/setup-go@v6
        with:
          go-version: '1.24'

      - name: Install dependencies
        run: go mod tidy

      - name: Build
        run: go build ./...

      - name: Label-kit codeowners-enable (expand-fallback)
        shell: bash
        run: |
          go run . labeler \
            --config .github/labeler-codeowners-test-expand-fallback.yml \
            --sync \
            --review-request always \
            --dryrun \
            "${LABELED_NO_REQUEST_PR}" | tee ${{ runner.temp }}/output.txt
      - name: Test reviewers (expand fallback)
        run: |
          grep -q "Would request reviewers for PR" "${RUNNER_TEMP}/output.txt"
          grep -q "srz-zumix/team" "${RUNNER_TEMP}/output.txt"

